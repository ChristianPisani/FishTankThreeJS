/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 .\\public\\Goldfish.glb
*/

import React, {
    useRef,
    useState
} from 'react'
import {
    useGLTF
} from '@react-three/drei'
import * as THREE
    from 'three';
import {
    useFrame
} from "@react-three/fiber";
import {
    Vector3
} from "three";
import node
    from "three/addons/nodes/core/Node.js";

export function GoldFish(props) {
    const {
        nodes,
        materials
    } = useGLTF('/Goldfish.glb')

    const meshes = useRef([]);
    
    Object.keys(materials).forEach(mKey => materials[mKey].side = THREE.DoubleSide);

    const animateSwim = (geo, elapsedTime) => {
        const positionArray = geo.attributes.position.array;

        for (let i = 0; i < positionArray.length; i += 3) {
            const xPos = positionArray[i];
            const yPos = positionArray[i + 1];
            const zPos = positionArray[i + 2];

            let pos = new Vector3(xPos, yPos, zPos);
            pos.x = xPos + (Math.sin(elapsedTime * 5 + Math.cos(zPos) * 4) / 50);
            geo.attributes.position.array[i] = pos.x;
            geo.attributes.position.array[i + 1] = pos.y;
            geo.attributes.position.array[i + 2] = pos.z;
        }

        geo.attributes.position.needsUpdate = true;
        
        return geo;
    }

    meshes.current = Object.keys(nodes)
        .filter(nodeKey => nodes[nodeKey].type === "Mesh")
        .map(nodeKey => {
            let geo = nodes[nodeKey].geometry;

            geo = animateSwim(geo, 1);
            
            return geo;
        });


    useFrame(({ clock }) => {
        const elapsedTime = clock.getElapsedTime();
        
        meshes.current = meshes.current.map(geo => animateSwim(geo, elapsedTime));
    })

    return (
        <group {...props}
               dispose={null}>
            <instancedMesh
                castShadow
                receiveShadow
                ref={props.fishRef[0]}
                args={[null, null, props.amount ?? 1]}
                geometry={meshes.current[0]}
                material={materials['Material.003']}/>
            <instancedMesh
                castShadow
                receiveShadow
                ref={props.fishRef[1]}
                args={[null, null, props.amount ?? 1]}
                geometry={meshes.current[1]}
                material={materials['Material.002']}/>
            <instancedMesh
                castShadow
                receiveShadow
                ref={props.fishRef[2]}
                args={[null, null, props.amount ?? 1]}
                geometry={meshes.current[2]}
                material={materials['Material.001']}/>
            <instancedMesh
                castShadow
                receiveShadow
                ref={props.fishRef[3]}
                args={[null, null, props.amount ?? 1]}
                geometry={meshes.current[3]}
                material={materials['Material.004']}/>
            <instancedMesh
                castShadow
                receiveShadow
                ref={props.fishRef[4]}
                args={[null, null, props.amount ?? 1]}
                geometry={meshes.current[4]}
                material={materials.Material}/>
        </group>
    )
}

useGLTF.preload('/Goldfish.glb')
